'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Container for props that come from the Server Sent Events
 */
var EventSourceProps = function () {
    function EventSourceProps() {
        _classCallCheck(this, EventSourceProps);

        this.handlers = [];
        this.props = {};
    }

    _createClass(EventSourceProps, [{
        key: 'update',
        value: function update(props) {
            this.props = _extends({}, this.props, props);
            this.fire();
        }
    }, {
        key: 'subscribe',
        value: function subscribe(fn) {
            if (typeof fn !== 'function') {
                throw new Error('Only functions can be subscribed.');
            }

            this.handlers.push(fn);
        }
    }, {
        key: 'unsubscribe',
        value: function unsubscribe(fn) {
            this.handlers = this.handlers.filter(function (item) {
                if (item != fn) {
                    return item;
                }
            });
        }
    }, {
        key: 'fire',
        value: function fire() {
            for (var i = 0; i < this.handlers.length; i++) {
                this.handlers[i](this.props);
            }
        }
    }]);

    return EventSourceProps;
}();

exports.default = EventSourceProps;