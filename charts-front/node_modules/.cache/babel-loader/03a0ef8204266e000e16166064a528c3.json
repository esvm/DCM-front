{"ast":null,"code":"var _jsxFileName = \"/Users/lariciamota/Documents/Cie\\u0302ncia da Computac\\u0327a\\u0303o/7\\xBA peri\\u0301odo/Microserv/Projeto/microserv-front/src/components/Charts/Charts.js\";\nimport React, { Component } from 'react';\nimport { Header, Grid } from 'semantic-ui-react';\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Area } from 'recharts';\nexport default class Charts extends Component {\n  render() {\n    const data = [300, 500, 230, 100]; // const firstData = [{value: 500}, {value: 300}, {value: 350}, {value: 650}, {value: 200}];\n\n    const firstData = [];\n    data.forEach(element => {\n      let newElement = {\n        \"value\": element\n      };\n      console.log(newElement);\n      firstData.push(newElement);\n    });\n    const colorDefinition = React.createElement(\"linearGradient\", {\n      id: \"colorValue\",\n      x1: \"0\",\n      y1: \"0\",\n      x2: \"0\",\n      y2: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"stop\", {\n      offset: \"5%\",\n      stopColor: \"#8884d8\",\n      stopOpacity: 0.8,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }), React.createElement(\"stop\", {\n      offset: \"95%\",\n      stopColor: \"#8884d8\",\n      stopOpacity: 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }));\n    console.log(firstData);\n    return React.createElement(\"div\", {\n      className: \"Charts\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h2\",\n      content: \"DCM - Data Centering Middleware\",\n      subheader: \"Charts\",\n      dividing: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/lariciamota/Documents/Ciência da Computação/7º período/Microserv/Projeto/microserv-front/src/components/Charts/Charts.js"],"names":["React","Component","Header","Grid","AreaChart","XAxis","YAxis","CartesianGrid","Tooltip","Area","Charts","render","data","firstData","forEach","element","newElement","console","log","push","colorDefinition"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,SAAT,EAAoBC,KAApB,EAA2BC,KAA3B,EAAkCC,aAAlC,EAAiDC,OAAjD,EAA0DC,IAA1D,QAAsE,UAAtE;AAEA,eAAe,MAAMC,MAAN,SAAqBT,SAArB,CAA+B;AAC1CU,EAAAA,MAAM,GAAG;AACL,UAAMC,IAAI,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAb,CADK,CAEL;;AACA,UAAMC,SAAS,GAAG,EAAlB;AACID,IAAAA,IAAI,CAACE,OAAL,CAAaC,OAAO,IAAI;AACpB,UAAIC,UAAU,GAAG;AAAC,iBAASD;AAAV,OAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACAH,MAAAA,SAAS,CAACM,IAAV,CAAeH,UAAf;AAEH,KALD;AAMJ,UAAMI,eAAe,GACjB;AAAgB,MAAA,EAAE,EAAC,YAAnB;AAAgC,MAAA,EAAE,EAAC,GAAnC;AAAuC,MAAA,EAAE,EAAC,GAA1C;AAA8C,MAAA,EAAE,EAAC,GAAjD;AAAqD,MAAA,EAAE,EAAC,GAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAM,MAAA,MAAM,EAAC,IAAb;AAAkB,MAAA,SAAS,EAAC,SAA5B;AAAsC,MAAA,WAAW,EAAE,GAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI;AAAM,MAAA,MAAM,EAAC,KAAb;AAAmB,MAAA,SAAS,EAAC,SAA7B;AAAuC,MAAA,WAAW,EAAE,CAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMAH,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,WACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,OAAO,EAAC,iCAAxB;AAA0D,MAAA,SAAS,EAAC,QAApE;AAA6E,MAAA,QAAQ,MAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AA2EH;;AA7FyC","sourcesContent":["import React, { Component } from 'react'\nimport { Header, Grid } from 'semantic-ui-react'\nimport { AreaChart, XAxis, YAxis, CartesianGrid, Tooltip, Area } from 'recharts';\n\nexport default class Charts extends Component {\n    render() {\n        const data = [300, 500, 230, 100]\n        // const firstData = [{value: 500}, {value: 300}, {value: 350}, {value: 650}, {value: 200}];\n        const firstData = [];\n            data.forEach(element => {\n                let newElement = {\"value\": element};\n                console.log(newElement)\n                firstData.push(newElement);\n\n            });\n        const colorDefinition = (\n            <linearGradient id=\"colorValue\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\n                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\n            </linearGradient>\n        )\n        console.log(firstData)\n        return (\n            <div className=\"Charts\">\n                <Header as='h2' content='DCM - Data Centering Middleware' subheader='Charts' dividing />\n                \n                {/* <Grid columns={2} centered>\n                    <Grid.Row>\n                        <AreaChart width={730} height={250} data={firstData}\n                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                            <defs>\n                                {colorDefinition}\n                            </defs>\n                            <XAxis />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip />\n                            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorValue)\" />\n                        </AreaChart>\n\n                        <AreaChart width={730} height={250} data={firstData}\n                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                            <defs>\n                                {colorDefinition}\n                            </defs>\n                            <XAxis />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip />\n                            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorValue)\" />\n                        </AreaChart>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <AreaChart width={730} height={250} data={firstData}\n                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                            <defs>\n                                {colorDefinition}\n                            </defs>\n                            <XAxis/>\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip />\n                            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorValue)\" />\n                        </AreaChart>\n\n                        <AreaChart width={730} height={250} data={firstData}\n                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                            <defs>\n                                {colorDefinition}\n                            </defs>\n                            <XAxis />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip />\n                            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorValue)\" />\n                        </AreaChart>\n                    </Grid.Row>\n\n                    <Grid.Row>\n                        <AreaChart width={730} height={250} data={firstData}\n                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                            <defs>\n                                {colorDefinition}\n                            </defs>\n                            <XAxis />\n                            <YAxis />\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <Tooltip />\n                            <Area type=\"monotone\" dataKey=\"value\" stroke=\"#8884d8\" fillOpacity={1} fill=\"url(#colorValue)\" />\n                        </AreaChart>\n                    </Grid.Row>\n                </Grid> */}\n\n\n            </div>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}