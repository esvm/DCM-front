{"ast":null,"code":"var original = require('original');\n\nvar parse = require('url').parse;\n\nvar events = require('events');\n\nvar https = require('https');\n\nvar http = require('http');\n\nvar util = require('util');\n\nvar httpsOptions = ['pfx', 'key', 'passphrase', 'cert', 'ca', 'ciphers', 'rejectUnauthorized', 'secureProtocol', 'servername', 'checkServerIdentity'];\nvar bom = [239, 187, 191];\nvar colon = 58;\nvar space = 32;\nvar lineFeed = 10;\nvar carriageReturn = 13;\n\nfunction hasBom(buf) {\n  return bom.every(function (charCode, index) {\n    return buf[index] === charCode;\n  });\n}\n/**\n * Creates a new EventSource object\n *\n * @param {String} url the URL to which to connect\n * @param {Object} [eventSourceInitDict] extra init params. See README for details.\n * @api public\n **/\n\n\nfunction EventSource(url, eventSourceInitDict) {\n  var readyState = EventSource.CONNECTING;\n  Object.defineProperty(this, 'readyState', {\n    get: function () {\n      return readyState;\n    }\n  });\n  Object.defineProperty(this, 'url', {\n    get: function () {\n      return url;\n    }\n  });\n  var self = this;\n  self.reconnectInterval = 1000;\n\n  function onConnectionClosed(message) {\n    if (readyState === EventSource.CLOSED) return;\n    readyState = EventSource.CONNECTING;\n\n    _emit('error', new Event('error', {\n      message: message\n    })); // The url may have been changed by a temporary\n    // redirect. If that's the case, revert it now.\n\n\n    if (reconnectUrl) {\n      url = reconnectUrl;\n      reconnectUrl = null;\n    }\n\n    setTimeout(function () {\n      if (readyState !== EventSource.CONNECTING) {\n        return;\n      }\n\n      connect();\n    }, self.reconnectInterval);\n  }\n\n  var req;\n  var lastEventId = '';\n\n  if (eventSourceInitDict && eventSourceInitDict.headers && eventSourceInitDict.headers['Last-Event-ID']) {\n    lastEventId = eventSourceInitDict.headers['Last-Event-ID'];\n    delete eventSourceInitDict.headers['Last-Event-ID'];\n  }\n\n  var discardTrailingNewline = false;\n  var data = '';\n  var eventName = '';\n  var reconnectUrl = null;\n\n  function connect() {\n    var options = parse(url);\n    var isSecure = options.protocol === 'https:';\n    options.headers = {\n      'Cache-Control': 'no-cache',\n      'Accept': 'text/event-stream'\n    };\n    if (lastEventId) options.headers['Last-Event-ID'] = lastEventId;\n\n    if (eventSourceInitDict && eventSourceInitDict.headers) {\n      for (var i in eventSourceInitDict.headers) {\n        var header = eventSourceInitDict.headers[i];\n\n        if (header) {\n          options.headers[i] = header;\n        }\n      }\n    } // Legacy: this should be specified as `eventSourceInitDict.https.rejectUnauthorized`,\n    // but for now exists as a backwards-compatibility layer\n\n\n    options.rejectUnauthorized = !(eventSourceInitDict && !eventSourceInitDict.rejectUnauthorized); // If specify http proxy, make the request to sent to the proxy server,\n    // and include the original url in path and Host headers\n\n    var useProxy = eventSourceInitDict && eventSourceInitDict.proxy;\n\n    if (useProxy) {\n      var proxy = parse(eventSourceInitDict.proxy);\n      isSecure = proxy.protocol === 'https:';\n      options.protocol = isSecure ? 'https:' : 'http:';\n      options.path = url;\n      options.headers.Host = options.host;\n      options.hostname = proxy.hostname;\n      options.host = proxy.host;\n      options.port = proxy.port;\n    } // If https options are specified, merge them into the request options\n\n\n    if (eventSourceInitDict && eventSourceInitDict.https) {\n      for (var optName in eventSourceInitDict.https) {\n        if (httpsOptions.indexOf(optName) === -1) {\n          continue;\n        }\n\n        var option = eventSourceInitDict.https[optName];\n\n        if (option !== undefined) {\n          options[optName] = option;\n        }\n      }\n    } // Pass this on to the XHR\n\n\n    if (eventSourceInitDict && eventSourceInitDict.withCredentials !== undefined) {\n      options.withCredentials = eventSourceInitDict.withCredentials;\n    }\n\n    req = (isSecure ? https : http).request(options, function (res) {\n      // Handle HTTP errors\n      if (res.statusCode === 500 || res.statusCode === 502 || res.statusCode === 503 || res.statusCode === 504) {\n        _emit('error', new Event('error', {\n          status: res.statusCode,\n          message: res.statusMessage\n        }));\n\n        onConnectionClosed();\n        return;\n      } // Handle HTTP redirects\n\n\n      if (res.statusCode === 301 || res.statusCode === 307) {\n        if (!res.headers.location) {\n          // Server sent redirect response without Location header.\n          _emit('error', new Event('error', {\n            status: res.statusCode,\n            message: res.statusMessage\n          }));\n\n          return;\n        }\n\n        if (res.statusCode === 307) reconnectUrl = url;\n        url = res.headers.location;\n        process.nextTick(connect);\n        return;\n      }\n\n      if (res.statusCode !== 200) {\n        _emit('error', new Event('error', {\n          status: res.statusCode,\n          message: res.statusMessage\n        }));\n\n        return self.close();\n      }\n\n      readyState = EventSource.OPEN;\n      res.on('close', function () {\n        res.removeAllListeners('close');\n        res.removeAllListeners('end');\n        onConnectionClosed();\n      });\n      res.on('end', function () {\n        res.removeAllListeners('close');\n        res.removeAllListeners('end');\n        onConnectionClosed();\n      });\n\n      _emit('open', new Event('open')); // text/event-stream parser adapted from webkit's\n      // Source/WebCore/page/EventSource.cpp\n\n\n      var isFirst = true;\n      var buf;\n      res.on('data', function (chunk) {\n        buf = buf ? Buffer.concat([buf, chunk]) : chunk;\n\n        if (isFirst && hasBom(buf)) {\n          buf = buf.slice(bom.length);\n        }\n\n        isFirst = false;\n        var pos = 0;\n        var length = buf.length;\n\n        while (pos < length) {\n          if (discardTrailingNewline) {\n            if (buf[pos] === lineFeed) {\n              ++pos;\n            }\n\n            discardTrailingNewline = false;\n          }\n\n          var lineLength = -1;\n          var fieldLength = -1;\n          var c;\n\n          for (var i = pos; lineLength < 0 && i < length; ++i) {\n            c = buf[i];\n\n            if (c === colon) {\n              if (fieldLength < 0) {\n                fieldLength = i - pos;\n              }\n            } else if (c === carriageReturn) {\n              discardTrailingNewline = true;\n              lineLength = i - pos;\n            } else if (c === lineFeed) {\n              lineLength = i - pos;\n            }\n          }\n\n          if (lineLength < 0) {\n            break;\n          }\n\n          parseEventStreamLine(buf, pos, fieldLength, lineLength);\n          pos += lineLength + 1;\n        }\n\n        if (pos === length) {\n          buf = void 0;\n        } else if (pos > 0) {\n          buf = buf.slice(pos);\n        }\n      });\n    });\n    req.on('error', function (err) {\n      onConnectionClosed(err.message);\n    });\n    if (req.setNoDelay) req.setNoDelay(true);\n    req.end();\n  }\n\n  connect();\n\n  function _emit() {\n    if (self.listeners(arguments[0]).length > 0) {\n      self.emit.apply(self, arguments);\n    }\n  }\n\n  this._close = function () {\n    if (readyState === EventSource.CLOSED) return;\n    readyState = EventSource.CLOSED;\n    if (req.abort) req.abort();\n    if (req.xhr && req.xhr.abort) req.xhr.abort();\n  };\n\n  function parseEventStreamLine(buf, pos, fieldLength, lineLength) {\n    if (lineLength === 0) {\n      if (data.length > 0) {\n        var type = eventName || 'message';\n\n        _emit(type, new MessageEvent(type, {\n          data: data.slice(0, -1),\n          // remove trailing newline\n          lastEventId: lastEventId,\n          origin: original(url)\n        }));\n\n        data = '';\n      }\n\n      eventName = void 0;\n    } else if (fieldLength > 0) {\n      var noValue = fieldLength < 0;\n      var step = 0;\n      var field = buf.slice(pos, pos + (noValue ? lineLength : fieldLength)).toString();\n\n      if (noValue) {\n        step = lineLength;\n      } else if (buf[pos + fieldLength + 1] !== space) {\n        step = fieldLength + 1;\n      } else {\n        step = fieldLength + 2;\n      }\n\n      pos += step;\n      var valueLength = lineLength - step;\n      var value = buf.slice(pos, pos + valueLength).toString();\n\n      if (field === 'data') {\n        data += value + '\\n';\n      } else if (field === 'event') {\n        eventName = value;\n      } else if (field === 'id') {\n        lastEventId = value;\n      } else if (field === 'retry') {\n        var retry = parseInt(value, 10);\n\n        if (!Number.isNaN(retry)) {\n          self.reconnectInterval = retry;\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventSource;\nutil.inherits(EventSource, events.EventEmitter);\nEventSource.prototype.constructor = EventSource; // make stacktraces readable\n\n['open', 'error', 'message'].forEach(function (method) {\n  Object.defineProperty(EventSource.prototype, 'on' + method, {\n    /**\n     * Returns the current listener\n     *\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */\n    get: function get() {\n      var listener = this.listeners(method)[0];\n      return listener ? listener._listener ? listener._listener : listener : undefined;\n    },\n\n    /**\n     * Start listening for events\n     *\n     * @param {Function} listener the listener\n     * @return {Mixed} the set function or undefined\n     * @api private\n     */\n    set: function set(listener) {\n      this.removeAllListeners(method);\n      this.addEventListener(method, listener);\n    }\n  });\n});\n/**\n * Ready states\n */\n\nObject.defineProperty(EventSource, 'CONNECTING', {\n  enumerable: true,\n  value: 0\n});\nObject.defineProperty(EventSource, 'OPEN', {\n  enumerable: true,\n  value: 1\n});\nObject.defineProperty(EventSource, 'CLOSED', {\n  enumerable: true,\n  value: 2\n});\nEventSource.prototype.CONNECTING = 0;\nEventSource.prototype.OPEN = 1;\nEventSource.prototype.CLOSED = 2;\n/**\n * Closes the connection, if one is made, and sets the readyState attribute to 2 (closed)\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventSource/close\n * @api public\n */\n\nEventSource.prototype.close = function () {\n  this._close();\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using addEventListener.\n *\n * @param {String} type A string representing the event type to listen out for\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.addEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\n\n\nEventSource.prototype.addEventListener = function addEventListener(type, listener) {\n  if (typeof listener === 'function') {\n    // store a reference so we can return the original function again\n    listener._listener = listener;\n    this.on(type, listener);\n  }\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using dispatchEvent.\n *\n * @param {Event} event An event to be dispatched\n * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent\n * @api public\n */\n\n\nEventSource.prototype.dispatchEvent = function dispatchEvent(event) {\n  if (!event.type) {\n    throw new Error('UNSPECIFIED_EVENT_TYPE_ERR');\n  } // if event is instance of an CustomEvent (or has 'details' property),\n  // send the detail object as the payload for the event\n\n\n  this.emit(event.type, event.detail);\n};\n/**\n * Emulates the W3C Browser based WebSocket interface using removeEventListener.\n *\n * @param {String} type A string representing the event type to remove\n * @param {Function} listener callback\n * @see https://developer.mozilla.org/en/DOM/element.removeEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\n\n\nEventSource.prototype.removeEventListener = function removeEventListener(type, listener) {\n  if (typeof listener === 'function') {\n    listener._listener = undefined;\n    this.removeListener(type, listener);\n  }\n};\n/**\n * W3C Event\n *\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#interface-Event\n * @api private\n */\n\n\nfunction Event(type, optionalProperties) {\n  Object.defineProperty(this, 'type', {\n    writable: false,\n    value: type,\n    enumerable: true\n  });\n\n  if (optionalProperties) {\n    for (var f in optionalProperties) {\n      if (optionalProperties.hasOwnProperty(f)) {\n        Object.defineProperty(this, f, {\n          writable: false,\n          value: optionalProperties[f],\n          enumerable: true\n        });\n      }\n    }\n  }\n}\n/**\n * W3C MessageEvent\n *\n * @see http://www.w3.org/TR/webmessaging/#event-definitions\n * @api private\n */\n\n\nfunction MessageEvent(type, eventInitDict) {\n  Object.defineProperty(this, 'type', {\n    writable: false,\n    value: type,\n    enumerable: true\n  });\n\n  for (var f in eventInitDict) {\n    if (eventInitDict.hasOwnProperty(f)) {\n      Object.defineProperty(this, f, {\n        writable: false,\n        value: eventInitDict[f],\n        enumerable: true\n      });\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}